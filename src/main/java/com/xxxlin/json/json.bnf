{
  parserClass = 'com.xxxlin.json.JsonParser'
  parserUtilClass = "com.xxxlin.json.psi.JsonParserUtil"
  psiPackage = 'com.xxxlin.json.psi'
  psiImplPackage = 'com.xxxlin.json.psi.impl'

  elementTypeHolderClass = 'com.xxxlin.json.JsonElementTypes'
  elementTypeClass = 'com.xxxlin.json.JsonElementType'
  psiClassPrefix = "Json"
  psiVisitorName = "JsonElementVisitor"

  psiImplUtilClass = 'com.xxxlin.json.psi.impl.JsonPsiImplUtils'
  tokenTypeClass = 'com.xxxlin.json.JsonTokenType'

  implements("value") = "com.xxxlin.json.psi.JsonElement"
  extends("value") = "com.xxxlin.json.psi.impl.JsonElementImpl"

    tokens = [
        L_CURLY='{'
        R_CURLY='}'
        L_BRACKET='['
        R_BRACKET=']'

        COMMA=','
        COLON=':'
        LINE_COMMENT1='regexp://.*'
        LINE_COMMENT2='regexp:#.*'
        // "/*" ([^*]|\*+[^*/])* (\*+"/")?
        BLOCK_COMMENT='regexp:/\*([^*]|\*+[^*/])*(\*+/)?'
        // else /\*(?:[^*]|\*[^/])*\*+/

        // unclosed string literal matches till the line's end
        // any escape sequences included, illegal escapes are indicated by SyntaxHighlighter
        // and JsonStringLiteralAnnotator
        DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
        SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"
//        STRING='regexp:"([^\\"\r\n]|\\([\\"/bfnrt]|u[a-fA-F0-9]{4}))*"?'

        NUMBER='regexp:-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?'
        TRUE='true'
        FALSE='false'
        NULL='null'
        // Actually not defined in RFC 4627, but may be used for JSON5 and helps with
        // auto completion of keywords. Semantically, it represents "bad word" type
        // of tokens
        // Could be as loose as [^\s\[\]{}:,\"\']+, but is slightly more restricted
        // for the time being to match most forms of npm package names and semver versions
        // in package.json.
        // See https://github.com/npm/validate-npm-package-name
        IDENTIFIER="regexp:[[:jletterdigit:]~!()*\-./@\^<>=]+"
    ]

    extends("container|literal|reference_expression")=value
    extends("array|object")=container
    extends("string_literal|number_literal|boolean_literal|null_literal")=literal
    implements("property")=[
      "com.xxxlin.json.psi.JsonElement"
      "com.intellij.psi.PsiNamedElement"
    ]
}

// For compatibility we allow any value at root level (see JsonStandardComplianceAnnotator)
// Empty file is also allowed
json ::= value*

object ::= '{' object_element* '}' {
  pin=1
  methods=[
    findProperty
    getPresentation
  ]
  mixin="com.xxxlin.json.psi.impl.JsonObjectMixin"
}

// Hackity-hack to parse array elements and properties even if separating commas are missing,
private object_element ::= property (','|&'}') {
  recoverWhile = not_brace_or_next_value
  pin = 1
}

private property_value ::= value

property ::= property_name (':' property_value) {
  methods=[
    getName
    getNameElement
    getValue
    // suppress getValueList() accessor
    value=""
    getPresentation
  ]
  mixin="com.xxxlin.json.psi.impl.JsonPropertyMixin"
  pin(".*")=1
}

private property_name ::= literal | reference_expression

array ::= '[' array_element* ']' {
  methods=[
    getPresentation
  ]
  pin=1
}

private array_element ::= value (','|&']') {
  recoverWhile = not_bracket_or_next_value
  pin=1
}

string_literal ::= SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING {
  methods=[
    getTextFragments
    getValue
    isPropertyName
    SINGLE_QUOTED_STRING=""
    DOUBLE_QUOTED_STRING=""
  ]
  mixin="com.xxxlin.json.psi.impl.JsonStringLiteralMixin"
}
number_literal ::= NUMBER {
  methods=[
    NUMBER=""
    getValue
  ]
}
boolean_literal ::= TRUE | FALSE {
  methods=[
    getValue
  ]
}
null_literal ::= NULL

literal ::= string_literal | number_literal | boolean_literal | null_literal {
  methods=[
    isQuotedString
  ]
  mixin="com.xxxlin.json.psi.impl.JsonLiteralMixin"
}

fake container ::=

reference_expression ::= IDENTIFIER {
  mixin="com.xxxlin.json.psi.impl.JsonReferenceLiteralMixin"
}

value ::= object | array | literal | reference_expression

// Recoveries
private not_bracket_or_next_value ::= !(']'|value)
private not_brace_or_next_value ::= !('}'|value)